apiVersion: v1
kind: Pod
metadata:
  name: 6-fast-cwdm
spec:
  nodeSelector:
    #topology.kubernetes.io/region: us-west
    nautilus.io/linstor: "true"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nvidia.com/gpu.product
            operator: In
            values:
            - NVIDIA-A10
            - NVIDIA-GeForce-RTX-3090
            - NVIDIA-GeForce-RTX-4090
            - NVIDIA-TITAN-RTX
            - NVIDIA-RTX-A5000
            - Quadro-RTX-6000
            - Tesla-V100-SXM2-32GB
            - NVIDIA-A40
            - NVIDIA-L40
            - NVIDIA-RTX-A6000
            - Quadro-RTX-8000

  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
    - key: nvidia.com/gpu
      operator: Exists
      effect: PreferNoSchedule
  containers:
    - name: brats-processing
      image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
      env:
        - name: REPO_PATH
          value: /app/brats-synthesis
        - name: PYTHONPATH
          value: /app/brats-synthesis
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: nnUNet_raw
          value: /app/nnunet/raw
        - name: nnUNet_preprocessed
          value: /app/nnunet/preprocessed
        - name: nnUNet_results
          value: /app/nnunet/results
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONIOENCODING
          value: "UTF-8"
        - name: WANDB_API_KEY
          valueFrom:
            secretKeyRef:
              name: wandb-credentials
              key: api-key
        - name: WANDB_PROJECT
          value: "fast-cwmd"
        - name: WANDB_ENTITY
          value: "timgsereda"
        - name: WANDB_MODE
          value: "online"

      command: ["/bin/bash", "-c"]
      args:
        - |
          git clone -b seemore https://github.com/tsereda/brats-synthesis.git ${REPO_PATH}
          cd ${REPO_PATH}

          sudo apt-get update && sudo apt-get install -y p7zip-full wget git

          # Create target directories
          sudo mkdir -p /data/checkpoints
          sudo mkdir -p /data/results
          mkdir -p datasets/BRATS2023/training
          mkdir -p datasets/BRATS2023/validation

          # Extract and move to correct locations  
          7z x /data/ASNR-MICCAI-BraTS2023-GLI-MET-TrainingData.zip

          # Move to expected locations
          mv ASNR-MICCAI-BraTS2023-GLI-MET-TrainingData/* datasets/BRATS2023/training/

          # Clean up any hidden files that might cause issues
          find datasets/BRATS2023/training -name ".*" -delete 2>/dev/null || true
          find datasets/BRATS2023/validation -name ".*" -delete 2>/dev/null || true

          echo "Training patients: $(ls datasets/BRATS2023/training/ | wc -l)"
          echo "Validation patients: $(ls datasets/BRATS2023/validation/ | wc -l)"

          pip install pyyaml torch tqdm numpy nibabel wandb matplotlib blobfile tensorboard

          python -c "import wandb; print(f'W&B version: {wandb.__version__}')"
          python -c "import torch; print(f'GPUs available: {torch.cuda.device_count()}')"

          conda init bash
          source ~/.bashrc

          mamba env create -f environment.yml

          conda activate cwdm

          conda info --envs
          python --version

          echo "Training patients: $(ls datasets/BRATS2023/training/ | wc -l)"
          echo "Validation patients: $(ls datasets/BRATS2023/validation/ | wc -l)"
          echo "Sample training patient files: $(ls datasets/BRATS2023/training/$(ls datasets/BRATS2023/training/ | head -1)/ | wc -l)"
          
          mv datasets/ fast_cwdm/
          cd fast_cwdm
          bash run.sh --sampling-strategy direct --timesteps 1000 --mode train --train_modality all

          ls -la /data/checkpoints/

          echo "Job completed successfully"

          tail -f /dev/null
     
      volumeMounts:
        - name: workspace
          mountPath: /app
        - name: data
          mountPath: /data
        - name: shm
          mountPath: /dev/shm
    
      resources:
        requests:
          memory: 24Gi
          cpu: "12"
          nvidia.com/gpu: "1"
        limits:
          memory: 32Gi
          cpu: "16"
          nvidia.com/gpu: "1"
 
  volumes:
    - name: workspace
      emptyDir:
        sizeLimit: 50Gi
    - name: data
      persistentVolumeClaim:
        claimName: brats2025-6
    - name: shm
      emptyDir:
        medium: Memory
        sizeLimit: 16Gi
 
  restartPolicy: Never