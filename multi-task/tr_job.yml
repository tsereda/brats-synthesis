apiVersion: batch/v1
kind: Job
metadata:
  name: 4-tr-multitask-t2f
spec:
  backoffLimit: 0
  template:
    metadata:
      labels:
        app: multitask-brats
    spec:
      nodeSelector:
        #topology.kubernetes.io/region: us-west
        nautilus.io/linstor: "true"
      
      containers:
        - name: brats-processing
          image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
          
          env:
            - name: REPO_PATH
              value: /app/UNETR-BraTS-Synthesis
            - name: PYTHONPATH
              value: /app/UNETR-BraTS-Synthesis
            - name: CUDA_VISIBLE_DEVICES
              value: "0"
            # nnUNet paths
            - name: nnUNet_raw
              value: /app/nnunet/raw
            - name: nnUNet_preprocessed
              value: /app/nnunet/preprocessed
            - name: nnUNet_results
              value: /app/nnunet/results
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: PYTHONIOENCODING
              value: "UTF-8"
            # W&B configuration
            - name: WANDB_API_KEY
              valueFrom:
                secretKeyRef:
                  name: wandb-credentials-edu
                  key: api-key
            - name: WANDB_PROJECT
              value: "UNETR-BraTS-SegFinetuneToSynth"
            - name: WANDB_ENTITY
              value: "timgsereda"
            - name: WANDB_MODE
              value: "online"
            - name: SYNAPSE_AUTHTOKEN
              valueFrom:
                secretKeyRef:
                  name: synapse-credentials
                  key: authtoken
          
          command: ["/bin/bash", "-c"]
          args:
            - |
              sudo mkdir /data/multitask_models/
              sudo chmod 777 /data/multitask_models/
              git clone -b bettervalidation https://github.com/tsereda/brats-synthesis.git ${REPO_PATH}
              cd ${REPO_PATH}
              
              sudo apt-get update && sudo apt-get install -y p7zip-full wget git
              
              7z x /data/ASNR-MICCAI-BraTS2023-GLI-MET-TrainingData.tar.gz
              7z x /data/ASNR-MICCAI-BraTS2023-GLI-MET-ValidationData.tar.gz

              7z x ASNR-MICCAI-BraTS2023-GLI-MET-TrainingData.tar
              7z x ASNR-MICCAI-BraTS2023-GLI-MET-ValidationData.tar
              
              pip install "numpy<2.0" pyyaml tqdm nibabel wandb matplotlib monai[all]
              pip install --upgrade tensorboard protobuf typing_extensions
              
              python -c "import wandb; print(f'W&B version: {wandb.__version__}')"
              
              python -c "import torch; print(f'GPUs available: {torch.cuda.device_count()}')"
              
              pip install "numpy<2.0" torch nibabel matplotlib monai[all]
  
              #choose from 'FLAIR', 'T1CE', 'T1', 'T2', 'all'
              python multi-task/train.py --batch_size 1 --max_epoch 2 --target_modality FLAIR

              echo "Job completed successfully!"
          
          volumeMounts:
            - name: workspace
              mountPath: /app
            - name: data
              mountPath: /data
            - name: shm
              mountPath: /dev/shm
          
          resources:
            requests:
              memory: 25Gi  
              cpu: "15"              
              nvidia.com/a100: "1"
            limits:
              memory: 30Gi
              cpu: "18"
              nvidia.com/a100: "1"
      
      volumes:
        - name: workspace
          emptyDir:
            sizeLimit: 50Gi
        - name: data
          persistentVolumeClaim:
            claimName: brats2025-4
        - name: shm
          emptyDir:
            medium: Memory
            sizeLimit: 16Gi
      
      restartPolicy: OnFailure