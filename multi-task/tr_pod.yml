apiVersion: v1
kind: Pod
metadata:
  name: 3-tr-multitask-t2w
spec:
  nodeSelector:
    #topology.kubernetes.io/region: us-west
    nautilus.io/linstor: "true"
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: nvidia.com/gpu.product
            operator: In
            values:
            - NVIDIA-A10
            - NVIDIA-GeForce-RTX-3090
            - NVIDIA-GeForce-RTX-4090
            - NVIDIA-TITAN-RTX
            - NVIDIA-RTX-A5000
            - Quadro-RTX-6000
            - Tesla-V100-SXM2-32GB
            - NVIDIA-A40
            - NVIDIA-L40
            - NVIDIA-RTX-A6000
            - Quadro-RTX-8000
  tolerations:
    - key: nvidia.com/gpu
      operator: Exists
    - key: nvidia.com/gpu
      operator: Exists
      effect: PreferNoSchedule
  containers:
    - name: brats-processing
      image: gitlab-registry.nrp-nautilus.io/prp/jupyter-stack/prp
      env:
        - name: REPO_PATH
          value: /app/brats-synthesis
        - name: PYTHONPATH
          value: /app/brats-synthesis
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        - name: PYTHONUNBUFFERED
          value: "1"
        - name: PYTHONIOENCODING
          value: "UTF-8"
        - name: WANDB_API_KEY
          valueFrom:
            secretKeyRef:
              name: wandb-credentials-edu
              key: api-key
        - name: WANDB_PROJECT
          value: "UNETR-BraTS-SegFinetuneToSynth"
        - name: WANDB_ENTITY
          value: "timgsereda"
        - name: WANDB_MODE
          value: "online"
      command: ["/bin/bash", "-c"]
      args:
        - |
            sudo mkdir /data/multitask_models/
            sudo chmod 777 /data/multitask_models/
            git clone https://github.com/tsereda/brats-synthesis.git ${REPO_PATH}
            cd ${REPO_PATH}
            
            sudo apt-get update && sudo apt-get install -y p7zip-full wget git
            
            7z x /data/ASNR-MICCAI-BraTS2023-GLI-MET-TrainingData.tar.gz
            7z x /data/ASNR-MICCAI-BraTS2023-GLI-MET-ValidationData.tar.gz

            7z x ASNR-MICCAI-BraTS2023-GLI-MET-TrainingData.tar
            7z x ASNR-MICCAI-BraTS2023-GLI-MET-ValidationData.tar
            
            pip install "numpy<2.0" pyyaml tqdm nibabel wandb matplotlib monai[all]
            pip install --upgrade tensorboard protobuf typing_extensions
            
            python -c "import wandb; print(f'W&B version: {wandb.__version__}')"
            
            python -c "import torch; print(f'GPUs available: {torch.cuda.device_count()}')"
            
            pip install "numpy<2.0" torch nibabel matplotlib monai[all]

            python multi-task/train.py --batch_size 1 --max_epoch 2 --target_modality t2w


            tail -f /dev/null

      volumeMounts:
        - name: workspace
          mountPath: /app
        - name: data
          mountPath: /data
        - name: shm
          mountPath: /dev/shm
      resources:
        requests:
          memory: 24Gi  
          cpu: "12"              
          nvidia.com/gpu: "1"
        limits:
          memory: 32Gi
          cpu: "16"
          nvidia.com/gpu: "1"
  volumes:
    - name: workspace
      emptyDir:
        sizeLimit: 50Gi
    - name: data
      persistentVolumeClaim:
        claimName: brats2025-3
    - name: shm
      emptyDir:
        medium: Memory
        sizeLimit: 16Gi
  restartPolicy: Never